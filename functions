__git_repo_name() {
  cdup=$(git rev-parse --show-cdup 2> /dev/null)
  if [ $? == 0 ]; then
    if [ -z "$cdup" ]; then
      cdup=.
    fi
    dir=$(cd $cdup; pwd)
    echo -n "("
    name=$(git config --get remote.origin.url | sed -e 's/^.*[:\\/]\([^:.\\/]*\)\.git$/\1/')
    if [ -n "$name" ]; then
      echo -n $name
    else
      echo -n $(basename $dir)
    fi
    echo ":"
  fi
}

cdg() {
  cdup=$(git rev-parse --show-cdup 2> /dev/null)
  r=$?
  if [ $r == 0 ]; then
    if [ -z "$cdup" ]; then
      cdup=.
    fi
    cd $cdup/$1
  else
    echo "Not in a git repository"
    return $r
  fi
}

domainavailable() {
  if whois $1 | grep "No match for" &> /dev/null; then
    echo "$1 is available"
    return 0
  else
    echo "$1 is not available"
    return 1
  fi
}

finddomain() {
  for f in $@; do
    domainavailable $f &> /dev/null && echo $f
  done
}

# Autocomplete for op command
_op_complete() {
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  basedir=$HOME/proyectos
  opts=$(cd $basedir; find -maxdepth 2 -type d | cut -b 3-)

  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
  return 0
}

complete -F _op_complete op


# vim:set syntax=sh:set ai:
